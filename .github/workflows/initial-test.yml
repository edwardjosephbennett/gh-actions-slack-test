name: "Send Slack Message"
run-name: Send Slack Message
# Limit how many instances of this workflow a pull request
# can run at once.
# Upon commit, if an instance is in progress for the same
# pull request, cancel it. The latest workflow is
# the priority.
concurrency:
  group: pull-request-${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true
on:
    push:

    # Manually trigger the workflow from the "Actions"
    # tab in the GitHub repo.
    workflow_dispatch:

jobs:
  build_slack_message:
    runs-on: ubuntu-latest
    name: "Build Slack Message Template"

    steps:
      # Checkout the current repository
      # Only use the .github folder in the repo as that is all we need
      - name: "Checkout Repo"
        uses: actions/checkout@v4
        id: checkout_repo
        with:
          sparse-checkout: |
            .github

      # Set up the variables for the Slack message template
      # These need to be in JSON object format
      # DICTIONARY - This is a JSON object that contains variable data for replacement within the template
      # VARIABLES - This is a string representation of the DICTIONARY
      # Example: {"username": "${{ github.actor }}"} will use the current user as the value of Username in the template
      # This must be converted to a string to store it in $GITHUB_OUTPUT, so we use the jq utility to convert it
      # @todo - Refactor this to use an external file to help keep this file cleaner
      - name: "Set up template variables"
        id: template_vars
        run: |
          DICTIONARY='{"username": "${{ github.actor }}", "repository": "${{ github.repository }}", "deployment": "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }'
          echo "SLACK_TEMPLATE_VARS_AS_STRING=$(echo "$DICTIONARY" | jq -c '. | tostring')" >> $GITHUB_OUTPUT

      # Create the final Slack template
      # Start by grabbing the variable string from the final step
      # Then pass that to the jq utility to filter a template and do some string replacement
      # This is how we get data from Github into the Slack message
      # We then output the final template into a json file
      - name: "Set up the Slack Template"
        id: slack_template
        run: |
          SLACK_TEMPLATE_VARS="${{ steps.template_vars.outputs.SLACK_TEMPLATE_VARS_AS_STRING }}"
          FILTERED_SLACK_TEMPLATE=$(echo "$SLACK_TEMPLATE_VARS" | jq -f './.github/workflows/slack/templates/deployment.jq')
          echo "$FILTERED_SLACK_TEMPLATE" >> ./.github/workflows/slack/templates/deployment-compiled.json

      - name: "Save template file"
        id: save_template_file
        uses: actions/upload-artifact@v4
        with:
          name: deployment-template
          path: "./.github/workflows/slack/templates/deployment-compiled.json"
          retention-days: 0.25

  post_slack_message:
    runs-on: ubuntu-latest
    name: "Post message to Slack"
    needs: [build_slack_message]
    env:
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
    steps:
      - name: "Get template file from Artifacts"
        uses: actions/download-artifact@v4
        with:
          name: deployment-template

      # Post our message to slack
      # We use the SLACK_CHANNEL_ID we have stored in the repos secrets
      # We pass our compiled JSON file to the action to send to the channel
      - name: "Post to Slack"
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: "${{ secrets.SLACK_CHANNEL_ID }}"
          payload-file-path: './.github/workflows/slack/templates/deployment-compiled.json'
